Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
		i. Attribute table = 10000
		ii. Business table = 10000
		iii. Category table = 10000
		iv. Checkin table = 10000
		v. elite_years table = 10000
		vi. friend table = 10000
		vii. hours table = 10000
		viii. photo table = 10000
		ix. review table = 10000
		x. tip table = 10000
		xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

		i. 	Business =	10000 	(pk: id)
		ii. 	Hours =		1562 	(fk: business_id)
		iii. 	Category =	2643    (fk: business_id)
		iv. 	Attribute =	1115	(fk: business_id)
		v. 	Review =	10000	(pk: id),	8090 (fk: business_id),	    9581 (fk: user_id)
		vi. 	Checkin = 	493 	(fk: business_id)
		vii. 	Photo =		10000	(pk: id),		6493 (fk: business_id)
		viii. 	Tip = 		537	(fk: user_id),      3979 (fk: business_id)
		ix. 	User = 		10000	(pk: id)
		x. 	Friend = 	11	(fk: user_id)
		xi. 	Elite_years =	2780	(fk: user_id)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

		Answer: no
	
	
	SQL code used to arrive at answer:

		SELECT
    			CASE 
        			WHEN COUNT(CASE WHEN id IS NULL THEN 1 END) > 0 THEN 'id has nulls'
        			WHEN COUNT(CASE WHEN name IS NULL THEN 1 END) > 0 THEN 'name has nulls'
        			WHEN COUNT(CASE WHEN review_count IS NULL THEN 1 END) > 0 THEN 'review_count has nulls'
        			WHEN COUNT(CASE WHEN yelping_since IS NULL THEN 1 END) > 0 THEN 'yelping_since has nulls'
        			WHEN COUNT(CASE WHEN useful IS NULL THEN 1 END) > 0 THEN 'useful has nulls'
        			WHEN COUNT(CASE WHEN funny IS NULL THEN 1 END) > 0 THEN 'funny has nulls'
        			WHEN COUNT(CASE WHEN cool IS NULL THEN 1 END) > 0 THEN 'cool has nulls'
        			WHEN COUNT(CASE WHEN fans IS NULL THEN 1 END) > 0 THEN 'fans has nulls'
        			WHEN COUNT(CASE WHEN average_stars IS NULL THEN 1 END) > 0 THEN 'average_stars has nulls'
        			WHEN COUNT(CASE WHEN compliment_hot  IS NULL THEN 1 END) > 0 THEN 'compliment_hot  has nulls'
        			WHEN COUNT(CASE WHEN compliment_more IS NULL THEN 1 END) > 0 THEN 'compliment_more has nulls'
        			WHEN COUNT(CASE WHEN compliment_profile IS NULL THEN 1 END) > 0 THEN 'compliment_profile has nulls'
        			WHEN COUNT(CASE WHEN compliment_cute IS NULL THEN 1 END) > 0 THEN 'compliment_cute has nulls'
        			WHEN COUNT(CASE WHEN compliment_list IS NULL THEN 1 END) > 0 THEN 'compliment_list has nulls'
        			WHEN COUNT(CASE WHEN compliment_note IS NULL THEN 1 END) > 0 THEN 'compliment_note has nulls'
        			WHEN COUNT(CASE WHEN compliment_plain IS NULL THEN 1 END) > 0 THEN 'compliment_plain has nulls'
        			WHEN COUNT(CASE WHEN compliment_cool IS NULL THEN 1 END) > 0 THEN 'compliment_cool has nulls'
        			WHEN COUNT(CASE WHEN compliment_funny IS NULL THEN 1 END) > 0 THEN 'compliment_funny has nulls'
        			WHEN COUNT(CASE WHEN compliment_writer IS NULL THEN 1 END) > 0 THEN 'compliment_writer has nulls'
        			WHEN COUNT(CASE WHEN compliment_photos IS NULL THEN 1 END) > 0 THEN 'compliment_photos has nulls'
        			ELSE 'no nulls found in any column'
    			END AS null_check_result
		FROM user;
	
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min: 1   	max: 5		avg:  3.7082 
		
	
	ii. Table: Business, Column: Stars
	
		min: 1 		max: 5		avg:  3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min: 0		max: 2		avg: 0.0144 
		
	
	iv. Table: Checkin, Column: Count
	
		min: 1		max: 53		avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min: 0		max: 2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:

		SELECT city, sum(review_count) as reviews
 		from business
 		group by city
 		order by reviews desc

	
	
	Copy and Paste the Result Below:

+-----------------+---------+
| city            | reviews |
+-----------------+---------+
| Las Vegas       |   82854 |
| Phoenix         |   34503 |
| Toronto         |   24113 |
| Scottsdale      |   20614 |
| Charlotte       |   12523 |
| Henderson       |   10871 |
| Tempe           |   10504 |
| Pittsburgh      |    9798 |
| Montréal        |    9448 |
| Chandler        |    8112 |
| Mesa            |    6875 |
| Gilbert         |    6380 |
| Cleveland       |    5593 |
| Madison         |    5265 |
| Glendale        |    4406 |
| Mississauga     |    3814 |
| Edinburgh       |    2792 |
| Peoria          |    2624 |
| North Las Vegas |    2438 |
| Markham         |    2352 |
| Champaign       |    2029 |
| Stuttgart       |    1849 |
| Surprise        |    1520 |
| Lakewood        |    1465 |
| Goodyear        |    1155 |
+-----------------+---------+
(Output limit exceeded, 25 of 362 total rows shown)
	


6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

		select stars, count(stars)
		from business 
		where city="Avon"
		group by stars


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------+--------------+
| stars | count(stars) |
+-------+--------------+
|   1.5 |            1 |
|   2.5 |            2 |
|   3.5 |            3 |
|   4.0 |            2 |
|   4.5 |            1 |
|   5.0 |            1 |
+-------+--------------+

ii. Beachwood

SQL code used to arrive at answer:

		select stars, count(stars)
		from business 
		where city="Beachwood"
		group by stars


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):


+-------+--------------+
| stars | count(stars) |
+-------+--------------+
|   2.0 |            1 |
|   2.5 |            1 |
|   3.0 |            2 |
|   3.5 |            2 |
|   4.0 |            1 |
|   4.5 |            2 |
|   5.0 |            5 |
+-------+--------------+


7. Find the top 3 users based on their total number of reviews:
		
SQL code used to arrive at answer:

		Select id, name, review_count
		from user
		order by review_count desc
		limit 3

Copy and Paste the Result Below:

+------------------------+--------+--------------+
| id                     | name   | review_count |
+------------------------+--------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald |         2000 |
| -3s52C4zL_DHRK0ULG6qtg | Sara   |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg | Yuri   |         1339 |
+------------------------+--------+--------------+		


8. Does posing more reviews correlate with more fans?

Please explain your findings and interpretation of the results:

-- As can be seen from the snippet of the review_count and fans table below, having a high review_count doesn’t have a correlation to more fans. In my opinion, it has more to do with the quality of the review the user has given, the length of time one is yelping and whether its useful for the community or not.
-- I couldn’t analyze this intuition further as it seems that for the top names in this list, associated reviews are not present in the review table. It seems being a long time on yelp also doesn’t have a proper correlation to the number of fans. I used the following code to search for reviews and yelping_since for the top users.
	

Select name, date("now")-date(yelping_since) as yelping_since_years, review_count, fans, useful, funny, cool
from user
order by review_count desc

+-----------+---------------------+--------------+------+--------+--------+--------+
| name      | yelping_since_years | review_count | fans | useful |  funny |   cool |
+-----------+---------------------+--------------+------+--------+--------+--------+
| Gerald    |                  12 |         2000 |  253 |  17524 |   2324 |  15008 |
| Sara      |                  14 |         1629 |   50 |     25 |     10 |      2 |
| Yuri      |                  16 |         1339 |   76 |   1166 |    220 |    561 |
| .Hon      |                  18 |         1246 |  101 |   7850 |   5851 |   5104 |
| William   |                   9 |         1215 |  126 |   9363 |   9361 |   9370 |
| Harald    |                  12 |         1153 |  311 | 122921 | 122419 | 122890 |
| eric      |                  17 |         1116 |   16 |      1 |      4 |      0 |
| Roanna    |                  18 |         1039 |  104 |   2995 |   1188 |    636 |
| Mimi      |                  13 |          968 |  497 |    257 |    138 |    159 |
| Christine |                  15 |          930 |  173 |   4834 |   6646 |   4321 |
| Ed        |                  15 |          904 |   38 |    141 |     88 |     85 |
| Nicole    |                  18 |          864 |   43 |     66 |     11 |      4 |
| Fran      |                  12 |          862 |  124 |   9851 |   7606 |   9344 |
| Mark      |                  15 |          861 |  115 |   4008 |    570 |   2765 |
| Christina |                  12 |          842 |   85 |    158 |     34 |    102 |
| Dominic   |                  13 |          836 |   37 |     81 |     26 |     52 |
| Lissa     |                  17 |          834 |  120 |    455 |    150 |    342 |
| Lisa      |                  15 |          813 |  159 |     48 |     13 |      6 |
| Alison    |                  17 |          775 |   61 |    300 |    302 |    245 |
| Sui       |                  15 |          754 |   78 |      9 |     18 |      2 |
| Tim       |                  15 |          702 |   35 |   2252 |   1186 |   1859 |
| L         |                  14 |          696 |   10 |    182 |     69 |     39 |
| Angela    |                  14 |          694 |  101 |    158 |    164 |    105 |
| Crissy    |                  16 |          676 |   25 |      4 |      1 |      1 |
| Lyn       |                  15 |          675 |   45 |   1539 |    125 |    609 |
+-----------+---------------------+--------------+------+--------+--------+--------+
(Output limit exceeded, 25 of 10000 total rows shown)


	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:  Love is contained in 1780 reviews whereas Hate is contained in only 232 reviews.
	
	SQL code used to arrive at answer:

		Select count(*)
		from review
		where text like "%love%"

		select count(*)
		from review
		where text like "%hate%"

	
	
10. Find the top 10 users with the most fans:

SQL code used to arrive at answer:

		Select id, name, review_count, date("now")-date(yelping_since) as exp, fans
 		from user
 		order by fans desc
		limit 10
	
	
Copy and Paste the Result Below:

+------------------------+-----------+--------------+-----+------+
| id                     | name      | review_count | exp | fans |
+------------------------+-----------+--------------+-----+------+
| -9I98YbNQnLdAmcYfb324Q | Amy       |          609 |  17 |  503 |
| -8EnCioUmDygAbsYZmTeRQ | Mimi      |          968 |  13 |  497 |
| --2vR0DIsmQ6WfcSzKWigw | Harald    |         1153 |  12 |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw | Gerald    |         2000 |  12 |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ | Christine |          930 |  15 |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw | Lisa      |          813 |  15 |  159 |
| -9bbDysuiWeo2VShFJJtcw | Cat       |          377 |  15 |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ | William   |         1215 |   9 |  126 |
| -9da1xk7zgnnfO1uTVYGkA | Fran      |          862 |  12 |  124 |
| -lh59ko3dxChBSZ9U7LfUw | Lissa     |          834 |  17 |  120 |
+------------------------+-----------+--------------+-----+------+

	

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
--I have chosen Las Vegas as city and Restaurants as category for my analysis. as Las vegas has more review counts and Retaurants seems an interesting category with good review counts.

i. Do the two groups you chose to analyze have a different distribution of hours?

		Select b.city,b.name, b.review_count,b.stars, c.category
		from business as b
		join category as c
		on b.id=c.business_id
		where city="Las Vegas" and category="Restaurants"
		order by review_count DESC

result:
+-----------+---------------------+--------------+-------+-------------+
| city      | name                | review_count | stars | category    |
+-----------+---------------------+--------------+-------+-------------+
| Las Vegas | Big Wong Restaurant |          768 |   4.0 | Restaurants |
| Las Vegas | Jacques Cafe        |          168 |   4.0 | Restaurants |
| Las Vegas | Wingstop            |          123 |   3.0 | Restaurants |
| Las Vegas | Hibachi-San         |            3 |   4.5 | Restaurants |
+-----------+---------------------+--------------+-------+-------------+

Wing stop is only on category in range of 2-3 rating and rest of the above mentioned 3 fall into 4-5 star rating bucket.

+-----------+-----------+---------------------+-----------------------+
| ratings   | city      | name                | hours                 |
+-----------+-----------+---------------------+-----------------------+
| 4-5 stars | Las Vegas | Big Wong Restaurant | Monday|10:00-23:00    |
| 4-5 stars | Las Vegas | Big Wong Restaurant | Tuesday|10:00-23:00   |
| 4-5 stars | Las Vegas | Big Wong Restaurant | Friday|10:00-23:00    |
| 4-5 stars | Las Vegas | Big Wong Restaurant | Wednesday|10:00-23:00 |
| 4-5 stars | Las Vegas | Big Wong Restaurant | Thursday|10:00-23:00  |
| 4-5 stars | Las Vegas | Big Wong Restaurant | Sunday|10:00-23:00    |
| 4-5 stars | Las Vegas | Big Wong Restaurant | Saturday|10:00-23:00  |
| 4-5 stars | Las Vegas | Jacques Cafe        | Monday|11:00-20:00    |
| 4-5 stars | Las Vegas | Jacques Cafe        | Tuesday|11:00-20:00   |
| 4-5 stars | Las Vegas | Jacques Cafe        | Friday|11:00-20:00    |
| 4-5 stars | Las Vegas | Jacques Cafe        | Wednesday|11:00-20:00 |
| 4-5 stars | Las Vegas | Jacques Cafe        | Thursday|11:00-20:00  |
| 4-5 stars | Las Vegas | Jacques Cafe        | Sunday|8:00-14:00     |
| 4-5 stars | Las Vegas | Jacques Cafe        | Saturday|11:00-20:00  |
| 2-3 stars | Las Vegas | Wingstop            | Monday|11:00-0:00     |
| 2-3 stars | Las Vegas | Wingstop            | Tuesday|11:00-0:00    |
| 2-3 stars | Las Vegas | Wingstop            | Friday|11:00-0:00     |
| 2-3 stars | Las Vegas | Wingstop            | Wednesday|11:00-0:00  |
| 2-3 stars | Las Vegas | Wingstop            | Thursday|11:00-0:00   |
| 2-3 stars | Las Vegas | Wingstop            | Sunday|11:00-0:00     |
| 2-3 stars | Las Vegas | Wingstop            | Saturday|11:00-0:00   |
| 4-5 stars | Las Vegas | Hibachi-San         | None                  |
+-----------+-----------+---------------------+-----------------------+

-- 4-5 star rating restuarants:    1. "Big Wong Restaurant" : opens from 10 am to 11 pm every day
			           2. "Jacques Cafe" : except sunday in rest of the week it opens from 11 am to 8 pm and on sunday it opens from 8 am to 2 pm.
				   3. "Hibachi-San" : we dont have hours data on this restaurant.

-- 2-3 star rating restuarants:    1. "Wingstop" : opens from 11 am to 12 am


the code to obtain above mention table is: 

		Select case 
            		when b.stars<=3 and b.stars>=2 then "2-3 stars"
            		when b.stars<=5 and b.stars>=4 then "4-5 stars"
            		else null 
            		end as ratings,
    		b.city,b.name, h.hours
		from business as b
		left join category as c
		on b.id=c.business_id
		left join hours as h
		on b.id=h.business_id
		where b.city="Las Vegas" and c.category="Restaurants"
		order by review_count DESC


ii. Do the two groups you chose to analyze have a different number of reviews?

+-----------+--------------+
| ratings   | review_count |
+-----------+--------------+
| 2-3 stars |          123 |
| 4-5 stars |          939 |
+-----------+--------------+

--Yes the 2 groups have different number of reviews as shown in the above table.


the code to obtain above mention table is: 

		Select ratings, sum(rc) as review_count
		from (Select case 
            		when b.stars<=3 and b.stars>=2 then "2-3 stars"
            		when b.stars<=5 and b.stars>=4 then "4-5 stars"
            		else null 
            		end as ratings, b.city, b.name, b.review_count as rc
		from business as b
		left join category as c
		on b.id=c.business_id
		where b.city="Las Vegas" and c.category="Restaurants")
		group by ratings

         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

+-----------+-----------+---------------------+---------------------------------+-------+--------------+---------+
| ratings   | city      | name                | address                         | state | neighborhood | is_open |
+-----------+-----------+---------------------+---------------------------------+-------+--------------+---------+
| 4-5 stars | Las Vegas | Big Wong Restaurant | 5040 Spring Mountain Rd         | NV    | Chinatown    |       1 |
| 4-5 stars | Las Vegas | Jacques Cafe        | 1910 Village Center Cir, Unit 1 | NV    | Summerlin    |       0 |
| 2-3 stars | Las Vegas | Wingstop            | 5045 W Tropicana Ave            | NV    |              |       1 |
| 4-5 stars | Las Vegas | Hibachi-San         | 3480 S Maryland Pkwy            | NV    | Eastside     |       0 |
+-----------+-----------+---------------------+---------------------------------+-------+--------------+---------+

-- for 2-3 star restuarant "Wingstop" there is no neighborhood but for rest of the 4-5 star group does have a neighborhood, may be this is one of the main reasons which was helping the restaurant to get more reviews.


SQL code used for analysis:

		Select case 
            		when b.stars<=3 and b.stars>=2 then "2-3 stars"
            		when b.stars<=5 and b.stars>=4 then "4-5 stars"
            		else null 
            		end as ratings, b.city, b.name, b.address, b.state, b.neighborhood, b.is_open
		from business as b
		left join category as c
		on b.id=c.business_id
		where b.city="Las Vegas" and c.category="Restaurants"
		order by review_count DESC		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.


+-------------------------------------+---------+-------------+-------------------+--------------------------------------------+
|            Average_rating           | is_open | count(name) | sum(review_count) |               Average_review_count         |
+-------------------------------------+---------+-------------+-------------------+--------------------------------------------+
|                  3.69		      |       1 |        8902 |            295640 |                         33.21      	       |
|                  3.53		      |       0 |        1610 |             38854 |                         24.13              |
+-------------------------------------+---------+-------------+-------------------+--------------------------------------------+		

i. Difference 1: The businesses that are open tend to have more reviews than ones that are closed on average.
-- 			Open:   AVG(review_count) = 33.21
-- 			Closed: AVG(review_count) = 24.13
         
         
ii. Difference 2: The average star rating is higher for businesses that are open than businesses that are closed.
-- 			Open:   AVG(stars) = 3.69
-- 			Closed: AVG(stars) = 3.53         
         
SQL code used for analysis:

		Select cast(avg(b.stars) as decimal(3, 2)) as Average_rating, b.is_open, count(name), sum(review_count),cast(avg(b.review_count) as decimal(4, 2)) as Average_review_count
		from business as b
		left join category as c
		on b.id=c.business_id
		group by b.is_open
		order by review_count DESC
	
		
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	

i. Indicate the type of analysis you chose to do:

-- Predicting the number of fans a user will have is an interesting problem to consider.

         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:


After examining the ER diagram, several factors emerged as potential predictors for the number of fans a user might have. These include the number of useful reviews, the user's tenure on Yelp, elite membership status, elite membership duration, and received compliments. While additional analyses could have incorporated factors like review sentiment analysis and business ratings, these were not included in the current assessment.

The analysis focused primarily on the user table and the elite_years table, yielding the following insights:

1. Elite membership status appears to have minimal impact on the number of fans, as many high-fan users were never elite members.
2. On average, users have been active on Yelp for approximately 7 years.
3. In terms of fan prediction, each review, on average, contributes to approximately 0.033 fans. This suggests an expectation of one fan for every 30 reviews posted.
4. Further observations indicate that, on average, one can expect one fan for every 4 usefulness ratings given by users and one fan for every 5.5 compliment ratings given by users.

These findings shed light on potential factors influencing user fan counts and offer insights into fan prediction dynamics on Yelp.
                           
                  
iii. Output of your finished dataset:

+---------+--------------+------------+-----------------+-----------------+---------------------+
| name    | years_active | elite_year | fans_per_review | fans_per_useful | fans_per_compliment |
+---------+--------------+------------+-----------------+-----------------+---------------------+
| Gerald  |           10 |       None |            0.13 |            0.01 |                0.01 |
| .Hon    |           16 |       None |            0.08 |            0.01 |                0.01 |
| eric    |           15 |       None |            0.01 |            16.0 |                0.24 |
| Roanna  |           16 |       None |             0.1 |            0.03 |                0.02 |
| Ed      |           13 |          7 |            0.04 |            0.27 |                0.13 |
| Dominic |           11 |          6 |            0.04 |            0.46 |                0.13 |
| Lissa   |           15 |          8 |            0.14 |            0.26 |                0.04 |
| Alison  |           15 |       None |            0.08 |             0.2 |                0.03 |
| Sui     |           13 |       None |             0.1 |            8.67 |                0.27 |
| Crissy  |           14 |       None |            0.04 |            6.25 |                0.24 |
+---------+--------------+------------+-----------------+-----------------+---------------------+
         
         
iv. Provide the SQL code you used to create:

SELECT
	name, DATE('NOW')-yelping_since AS years_active,
	(MAX(year)-MIN(year)) AS elite_year, ROUND(fans*1.0/review_count,2) as fans_per_review,
	ROUND(fans*1.0/useful,2) as fans_per_useful,
	ROUND(fans*1.0/(funny+cool+compliment_hot+ compliment_more+ compliment_profile+ compliment_cute+ compliment_list + compliment_note + compliment_plain + compliment_cool + compliment_funny + compliment_writer + compliment_photos),2) AS fans_per_compliment

FROM user LEFT JOIN elite_years
ON user.id=elite_years.user_id

GROUP BY name

ORDER BY review_count DESC
LIMIT 10
